/*
 * Nimbits API
 * Nimbits Server Provides deep automation via a REST API
 *
 * OpenAPI spec version: 5.0
 * Contact: support@nimbits.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nimbits;

import com.ApiCallback;
import com.ApiClient;
import com.ApiException;
import com.ApiResponse;
import com.Configuration;
import com.Pair;
import com.ProgressRequestBody;
import com.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.nimbits.io.ChartDTO;
import com.nimbits.io.EntityGroup;
import com.nimbits.io.Snapshot;
import com.nimbits.io.Topic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicApi {
    private ApiClient apiClient;

    public TopicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addTopic
     * @param xApiKey x-api-key (required)
     * @param topic topic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTopicCall(String xApiKey, Topic topic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = topic;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/entity/topic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTopicValidateBeforeCall(String xApiKey, Topic topic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling addTopic(Async)");
        }
        
        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling addTopic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTopicCall(xApiKey, topic, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * AddTopic
     * Post a new Topic
     * @param xApiKey x-api-key (required)
     * @param topic topic (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic addTopic(String xApiKey, Topic topic) throws ApiException {
        ApiResponse<Topic> resp = addTopicWithHttpInfo(xApiKey, topic);
        return resp.getData();
    }

    /**
     * AddTopic
     * Post a new Topic
     * @param xApiKey x-api-key (required)
     * @param topic topic (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> addTopicWithHttpInfo(String xApiKey, Topic topic) throws ApiException {
        com.squareup.okhttp.Call call = addTopicValidateBeforeCall(xApiKey, topic, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * AddTopic (asynchronously)
     * Post a new Topic
     * @param xApiKey x-api-key (required)
     * @param topic topic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTopicAsync(String xApiKey, Topic topic, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTopicValidateBeforeCall(xApiKey, topic, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTopic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTopicCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/entity/topic/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTopicValidateBeforeCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling deleteTopic(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTopic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTopicCall(xApiKey, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * DeleteTopic
     * Delete a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic deleteTopic(String xApiKey, String id) throws ApiException {
        ApiResponse<Topic> resp = deleteTopicWithHttpInfo(xApiKey, id);
        return resp.getData();
    }

    /**
     * DeleteTopic
     * Delete a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> deleteTopicWithHttpInfo(String xApiKey, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteTopicValidateBeforeCall(xApiKey, id, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * DeleteTopic (asynchronously)
     * Delete a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTopicAsync(String xApiKey, String id, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTopicValidateBeforeCall(xApiKey, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDataTable
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param start start (optional)
     * @param end end (optional)
     * @param count count (optional)
     * @param mask mask (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDataTableCall(String xApiKey, String id, String start, String end, String count, String mask, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/table/topic/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (mask != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mask", mask));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDataTableValidateBeforeCall(String xApiKey, String id, String start, String end, String count, String mask, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getDataTable(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDataTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDataTableCall(xApiKey, id, start, end, count, mask, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GetDataTable
     * Get A Data Table For a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param start start (optional)
     * @param end end (optional)
     * @param count count (optional)
     * @param mask mask (optional)
     * @return ChartDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartDTO getDataTable(String xApiKey, String id, String start, String end, String count, String mask) throws ApiException {
        ApiResponse<ChartDTO> resp = getDataTableWithHttpInfo(xApiKey, id, start, end, count, mask);
        return resp.getData();
    }

    /**
     * GetDataTable
     * Get A Data Table For a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param start start (optional)
     * @param end end (optional)
     * @param count count (optional)
     * @param mask mask (optional)
     * @return ApiResponse&lt;ChartDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartDTO> getDataTableWithHttpInfo(String xApiKey, String id, String start, String end, String count, String mask) throws ApiException {
        com.squareup.okhttp.Call call = getDataTableValidateBeforeCall(xApiKey, id, start, end, count, mask, null, null);
        Type localVarReturnType = new TypeToken<ChartDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetDataTable (asynchronously)
     * Get A Data Table For a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param start start (optional)
     * @param end end (optional)
     * @param count count (optional)
     * @param mask mask (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDataTableAsync(String xApiKey, String id, String start, String end, String count, String mask, final ApiCallback<ChartDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDataTableValidateBeforeCall(xApiKey, id, start, end, count, mask, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGroup
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGroupCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/group/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGroupValidateBeforeCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getGroup(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getGroupCall(xApiKey, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GetGroup
     * Get Groups With all Connected Entities
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return EntityGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityGroup getGroup(String xApiKey, String id) throws ApiException {
        ApiResponse<EntityGroup> resp = getGroupWithHttpInfo(xApiKey, id);
        return resp.getData();
    }

    /**
     * GetGroup
     * Get Groups With all Connected Entities
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return ApiResponse&lt;EntityGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityGroup> getGroupWithHttpInfo(String xApiKey, String id) throws ApiException {
        com.squareup.okhttp.Call call = getGroupValidateBeforeCall(xApiKey, id, null, null);
        Type localVarReturnType = new TypeToken<EntityGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetGroup (asynchronously)
     * Get Groups With all Connected Entities
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupAsync(String xApiKey, String id, final ApiCallback<EntityGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupValidateBeforeCall(xApiKey, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGroups
     * @param xApiKey x-api-key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGroupsCall(String xApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGroupsValidateBeforeCall(String xApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getGroups(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getGroupsCall(xApiKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GetGroups
     * Get All Groups For an Account
     * @param xApiKey x-api-key (required)
     * @return List&lt;EntityGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EntityGroup> getGroups(String xApiKey) throws ApiException {
        ApiResponse<List<EntityGroup>> resp = getGroupsWithHttpInfo(xApiKey);
        return resp.getData();
    }

    /**
     * GetGroups
     * Get All Groups For an Account
     * @param xApiKey x-api-key (required)
     * @return ApiResponse&lt;List&lt;EntityGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EntityGroup>> getGroupsWithHttpInfo(String xApiKey) throws ApiException {
        com.squareup.okhttp.Call call = getGroupsValidateBeforeCall(xApiKey, null, null);
        Type localVarReturnType = new TypeToken<List<EntityGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetGroups (asynchronously)
     * Get All Groups For an Account
     * @param xApiKey x-api-key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupsAsync(String xApiKey, final ApiCallback<List<EntityGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupsValidateBeforeCall(xApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EntityGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshot
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/snapshot/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotValidateBeforeCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getSnapshot(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSnapshot(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSnapshotCall(xApiKey, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GetSnapshot
     * Get Snapshot for a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Snapshot getSnapshot(String xApiKey, String id) throws ApiException {
        ApiResponse<Snapshot> resp = getSnapshotWithHttpInfo(xApiKey, id);
        return resp.getData();
    }

    /**
     * GetSnapshot
     * Get Snapshot for a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Snapshot> getSnapshotWithHttpInfo(String xApiKey, String id) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotValidateBeforeCall(xApiKey, id, null, null);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetSnapshot (asynchronously)
     * Get Snapshot for a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotAsync(String xApiKey, String id, final ApiCallback<Snapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotValidateBeforeCall(xApiKey, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTopic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopicCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/entity/topic/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopicValidateBeforeCall(String xApiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getTopic(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTopic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTopicCall(xApiKey, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GetTopic
     * Get a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic getTopic(String xApiKey, String id) throws ApiException {
        ApiResponse<Topic> resp = getTopicWithHttpInfo(xApiKey, id);
        return resp.getData();
    }

    /**
     * GetTopic
     * Get a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> getTopicWithHttpInfo(String xApiKey, String id) throws ApiException {
        com.squareup.okhttp.Call call = getTopicValidateBeforeCall(xApiKey, id, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetTopic (asynchronously)
     * Get a Topic
     * @param xApiKey x-api-key (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopicAsync(String xApiKey, String id, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopicValidateBeforeCall(xApiKey, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSnapshot
     * @param xApiKey x-api-key (required)
     * @param value value (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSnapshotCall(String xApiKey, Snapshot value, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;
        
        // create path and map variables
        String localVarPath = "/v5_0/api/snapshot/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSnapshotValidateBeforeCall(String xApiKey, Snapshot value, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling postSnapshot(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling postSnapshot(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postSnapshot(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postSnapshotCall(xApiKey, value, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * PostSnapshot
     * Post a Snapshot to a Topic
     * @param xApiKey x-api-key (required)
     * @param value value (required)
     * @param id id (required)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Snapshot postSnapshot(String xApiKey, Snapshot value, String id) throws ApiException {
        ApiResponse<Snapshot> resp = postSnapshotWithHttpInfo(xApiKey, value, id);
        return resp.getData();
    }

    /**
     * PostSnapshot
     * Post a Snapshot to a Topic
     * @param xApiKey x-api-key (required)
     * @param value value (required)
     * @param id id (required)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Snapshot> postSnapshotWithHttpInfo(String xApiKey, Snapshot value, String id) throws ApiException {
        com.squareup.okhttp.Call call = postSnapshotValidateBeforeCall(xApiKey, value, id, null, null);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PostSnapshot (asynchronously)
     * Post a Snapshot to a Topic
     * @param xApiKey x-api-key (required)
     * @param value value (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSnapshotAsync(String xApiKey, Snapshot value, String id, final ApiCallback<Snapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSnapshotValidateBeforeCall(xApiKey, value, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
