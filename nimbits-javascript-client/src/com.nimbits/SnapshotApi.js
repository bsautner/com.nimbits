/**
 * Nimbits API
 * Nimbits Server Provides deep automation via a REST API
 *
 * OpenAPI spec version: 5.0
 * Contact: support@nimbits.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Snapshot from '../com.nimbits.io/Snapshot';

/**
* Snapshot service.
* @module com.nimbits/SnapshotApi
* @version 5.0
*/
export default class SnapshotApi {

    /**
    * Constructs a new SnapshotApi. 
    * @alias module:com.nimbits/SnapshotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSnapshot operation.
     * @callback module:com.nimbits/SnapshotApi~getSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/Snapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetSnapshot
     * Get Snapshot for a Topic
     * @param {String} xApiKey x-api-key
     * @param {String} id id
     * @param {module:com.nimbits/SnapshotApi~getSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/Snapshot}
     */
    getSnapshot(xApiKey, id, callback) {
      let postBody = null;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getSnapshot");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSnapshot");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;

      return this.apiClient.callApi(
        '/v5_0/api/snapshot/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSnapshot operation.
     * @callback module:com.nimbits/SnapshotApi~postSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/Snapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostSnapshot
     * Post a Snapshot to a Topic
     * @param {String} xApiKey x-api-key
     * @param {module:com.nimbits.io/Snapshot} value value
     * @param {String} id id
     * @param {module:com.nimbits/SnapshotApi~postSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/Snapshot}
     */
    postSnapshot(xApiKey, value, id, callback) {
      let postBody = value;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling postSnapshot");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling postSnapshot");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postSnapshot");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;

      return this.apiClient.callApi(
        '/v5_0/api/snapshot/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
