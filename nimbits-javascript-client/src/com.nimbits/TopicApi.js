/**
 * Nimbits API
 * Nimbits Server Provides deep automation via a REST API
 *
 * OpenAPI spec version: 5.0
 * Contact: support@nimbits.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChartDTO from '../com.nimbits.io/ChartDTO';
import EntityGroup from '../com.nimbits.io/EntityGroup';
import Snapshot from '../com.nimbits.io/Snapshot';
import Topic from '../com.nimbits.io/Topic';

/**
* Topic service.
* @module com.nimbits/TopicApi
* @version 5.0
*/
export default class TopicApi {

    /**
    * Constructs a new TopicApi. 
    * @alias module:com.nimbits/TopicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTopic operation.
     * @callback module:com.nimbits/TopicApi~addTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddTopic
     * Post a new Topic
     * @param {String} xApiKey x-api-key
     * @param {module:com.nimbits.io/Topic} topic topic
     * @param {module:com.nimbits/TopicApi~addTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/Topic}
     */
    addTopic(xApiKey, topic, callback) {
      let postBody = topic;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling addTopic");
      }

      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling addTopic");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topic;

      return this.apiClient.callApi(
        '/v5_0/api/entity/topic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTopic operation.
     * @callback module:com.nimbits/TopicApi~deleteTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteTopic
     * Delete a Topic
     * @param {String} xApiKey x-api-key
     * @param {String} id id
     * @param {module:com.nimbits/TopicApi~deleteTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/Topic}
     */
    deleteTopic(xApiKey, id, callback) {
      let postBody = null;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling deleteTopic");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTopic");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topic;

      return this.apiClient.callApi(
        '/v5_0/api/entity/topic/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataTable operation.
     * @callback module:com.nimbits/TopicApi~getDataTableCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/ChartDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDataTable
     * Get A Data Table For a Topic
     * @param {String} xApiKey x-api-key
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {String} opts.start start
     * @param {String} opts.end end
     * @param {String} opts.count count
     * @param {String} opts.mask mask
     * @param {module:com.nimbits/TopicApi~getDataTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/ChartDTO}
     */
    getDataTable(xApiKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getDataTable");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataTable");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'count': opts['count'],
        'mask': opts['mask']
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChartDTO;

      return this.apiClient.callApi(
        '/v5_0/api/table/topic/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:com.nimbits/TopicApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/EntityGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetGroup
     * Get Groups With all Connected Entities
     * @param {String} xApiKey x-api-key
     * @param {String} id id
     * @param {module:com.nimbits/TopicApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/EntityGroup}
     */
    getGroup(xApiKey, id, callback) {
      let postBody = null;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getGroup");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroup");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntityGroup;

      return this.apiClient.callApi(
        '/v5_0/api/group/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroups operation.
     * @callback module:com.nimbits/TopicApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.nimbits.io/EntityGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetGroups
     * Get All Groups For an Account
     * @param {String} xApiKey x-api-key
     * @param {module:com.nimbits/TopicApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.nimbits.io/EntityGroup>}
     */
    getGroups(xApiKey, callback) {
      let postBody = null;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getGroups");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [EntityGroup];

      return this.apiClient.callApi(
        '/v5_0/api/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshot operation.
     * @callback module:com.nimbits/TopicApi~getSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/Snapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetSnapshot
     * Get Snapshot for a Topic
     * @param {String} xApiKey x-api-key
     * @param {String} id id
     * @param {module:com.nimbits/TopicApi~getSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/Snapshot}
     */
    getSnapshot(xApiKey, id, callback) {
      let postBody = null;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getSnapshot");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSnapshot");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;

      return this.apiClient.callApi(
        '/v5_0/api/snapshot/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopic operation.
     * @callback module:com.nimbits/TopicApi~getTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTopic
     * Get a Topic
     * @param {String} xApiKey x-api-key
     * @param {String} id id
     * @param {module:com.nimbits/TopicApi~getTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/Topic}
     */
    getTopic(xApiKey, id, callback) {
      let postBody = null;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getTopic");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTopic");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topic;

      return this.apiClient.callApi(
        '/v5_0/api/entity/topic/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSnapshot operation.
     * @callback module:com.nimbits/TopicApi~postSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:com.nimbits.io/Snapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PostSnapshot
     * Post a Snapshot to a Topic
     * @param {String} xApiKey x-api-key
     * @param {module:com.nimbits.io/Snapshot} value value
     * @param {String} id id
     * @param {module:com.nimbits/TopicApi~postSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.nimbits.io/Snapshot}
     */
    postSnapshot(xApiKey, value, id, callback) {
      let postBody = value;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling postSnapshot");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling postSnapshot");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postSnapshot");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;

      return this.apiClient.callApi(
        '/v5_0/api/snapshot/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
